//requiring express
const express = require("express");
//setting a router , app. is replaced by router. here on in this file
const router = express.Router();
// importing the schema of mongoose
const IntervalUsage = require("../model/interval");
// using json structire in express
router.use(express.json());

// Making a endpoint at /output/peruserdata that sends the data
// will make it so if a time period is not given it will be all data
// and if user is not specified , it will send all user's data
// Sample input for this Endpoint
// {
//      "fromdate" : "Number",
//      "todate" : "Number",
//      "macaddress" : "String",
//      "deviceName" : "String"
// }

router.post("/peruserdata", (req, res) => {
  let userrequest = req.body;
  let rSearchparameter = makesearchparameters(userrequest);
  console.log(rSearchparameter);
  // Find the data in the mongodb database
  IntervalUsage.find(rSearchparameter, { _id: 0, __v: 0 }, (err, data) => {
    if (err) {
      console.log(err);
    } else {
      let pusheverythinghere = [];
      Object.entries(data).forEach((entry) => {
        [key, value] = entry;
        pusheverythinghere.push(value);
      });
      res.send(pusheverythinghere);
    }
  });
});

// A function to make search parameters from the input recieved

// A function that will make searchparameters based on what is given
function makesearchparameters(userrequest) {
  // setting default value for to and from dates if it is not set .
  if (!userrequest.fromdate) {
    userrequest.fromdate = 0;
  }
  if (!userrequest.todate) {
    userrequest.todate = 9999999999;
  }
  let searchparameters = {
    date: {
      $gt: userrequest.fromdate,
      $lt: userrequest.todate,
    },
  };
  // if mac address is given , tach on the mac address too
  if (userrequest.macaddress) {
    searchparameters.macaddress = userrequest.macaddress;
  }
  // if deviceName is given , tach it too
  if (userrequest.deviceName) {
    searchparameters.deviceName = userrequest.deviceName;
  }
  return searchparameters;
}

module.exports = router;
